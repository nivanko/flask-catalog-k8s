version: 2.1
jobs:
  test:
    docker:
      - image: python:slim
    steps:
      - run:
          name: install git
          command: |
            apt update && apt install -y git
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "web/requirements.txt" }}
            - dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip && pip install -r web/requirements.txt
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            pylint --disable=R,C,W1203 web/app.py 
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ checksum "web/requirements.txt" }}
  build:
    machine: true
    steps:
      - checkout
      - run: |
          docker build -t ${DOCKER_HUB_USERNAME}/catalog-db:1.0.1 ./db
          docker build -t ${DOCKER_HUB_USERNAME}/catalog-web:1.0.1 ./web
      # Update application version
      - run: |
          sed -i s/1.0.1/1.0.2/ ./web/app.py
          docker build -t ${DOCKER_HUB_USERNAME}/catalog-web:1.0.2 ./web
      - run: |
          echo ${DOCKER_HUB_PASSWORD} | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin
          docker push ${DOCKER_HUB_USERNAME}/catalog-db:1.0.1
          docker push ${DOCKER_HUB_USERNAME}/catalog-web:1.0.1
          docker push ${DOCKER_HUB_USERNAME}/catalog-web:1.0.2
  create_cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run: |
          mkdir ~/bin
          export URL="https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz"
          curl --silent --location ${URL} | tar xz -C ~/bin
#          ~/bin/eksctl create cluster --name ${AWS_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION} \
#          --with-oidc --ssh-access --ssh-public-key ${AWS_SSH_KEY}
      - persist_to_workspace:
          root: ~/
          paths:
            - bin
  deploy_application:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: |
          export URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -L ${URL} -o ~/bin/kubectl
          chmod +x ~/bin/kubectl
          ~/bin/eksctl utils write-kubeconfig --name ${AWS_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
          ~/bin/kubectl apply -f ./k8s
      - persist_to_workspace:
          root: ~/
          paths:
            - bin
  update_application:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: |
          ~/bin/eksctl utils write-kubeconfig --name ${AWS_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
          ~/bin/kubectl set image deployment/web web=nivanko/catalog-web:1.0.2
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: |
          ~/bin/eksctl utils write-kubeconfig --name ${AWS_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
          export APP_URL=$(~/bin/kubectl get services web -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl http://${APP_URL}/catalog/

workflows:
  eks_application:
    jobs:
      - test
      - build:
          requires: [test]
      - create_cluster:
          requires: [build]
      - deploy_application:
          requires: [create_cluster]
      - update_application:
          requires: [deploy_application]
      - smoke_test:
          requires: [update_application]
